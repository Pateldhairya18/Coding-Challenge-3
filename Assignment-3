def is_subset_sum(arr, target):
    n = len(arr)
    # Create a 2D table to store results of subproblems
    dp = [[False] * (target + 1) for _ in range(n + 1)]

    # If the target sum is 0, then answer is True
    for i in range(n + 1):
        dp[i][0] = True

    # Fill dp[][] in bottom up manner
    for i in range(1, n + 1):
        for j in range(1, target + 1):
            if arr[i - 1] > j:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]

    # Construct the subset from dp[][]
    subset = []
    if dp[n][target]:
        i, j = n, target
        while i > 0 and j > 0:
            if dp[i - 1][j]:
                i -= 1
            else:
                subset.append(arr[i - 1])
                j -= arr[i - 1]
                i -= 1
        return True, subset[::-1]
    else:
        return False, []

# Example usage
arr = [1, 3, 5, 0, 11, 17, 9, 5]
target_sum = 10
exists, subset = is_subset_sum(arr, target_sum)
if exists:
    print("Such a subset exists: ", subset)
else:
    print("No subset found with the given target sum.")
